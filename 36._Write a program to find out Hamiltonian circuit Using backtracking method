class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)] 
                            for row in range(vertices)]

    # Check if vertex v can be added at index 'pos' in the Hamiltonian Circuit
    def isSafe(self, v, pos, path):
        # Check if this vertex is an adjacent vertex of the previously added vertex
        if self.graph[path[pos-1]][v] == 0:
            return False

        # Check if the vertex has already been included
        if v in path:
            return False

        return True

    # Function to recursively solve the Hamiltonian Circuit problem using backtracking
    def hamCycleUtil(self, path, pos):
        # Base case: if all vertices are included in the path
        if pos == self.V:
            # And if there is an edge from the last included vertex to the first vertex
            if self.graph[path[pos-1]][path[0]] == 1:
                return True
            else:
                return False

        # Try different vertices as the next candidate in Hamiltonian Cycle
        for v in range(1, self.V):
            if self.isSafe(v, pos, path):
                path[pos] = v

                if self.hamCycleUtil(path, pos+1) == True:
                    return True

                # Remove the added vertex if it doesn't lead to a solution
                path[pos] = -1

        return False

    def hamiltonianCycle(self):
        path = [-1] * self.V

        # Start from vertex 0 as the first vertex in the path
        path[0] = 0

        if self.hamCycleUtil(path, 1) == False:
            print("No Hamiltonian Circuit exists")
            return False

        self.printSolution(path)
        return True

    def printSolution(self, path):
        print("Hamiltonian Circuit exists: ")
        for vertex in path:
            print(vertex, end=' ')
        print(path[0], "\n")  # Close the Hamiltonian Circuit by printing the starting vertex again


# Example usage:
g1 = Graph(5)
g1.graph = [[0, 1, 0, 1, 0],
            [1, 0, 1, 1, 1],
            [0, 1, 0, 0, 1],
            [1, 1, 0, 0, 1],
            [0, 1, 1, 1, 0]]

g1.hamiltonianCycle()

g2 = Graph(5)
g2.graph = [[0, 1, 0, 1, 0],
            [1, 0, 1, 1, 1],
            [0, 1, 0, 0, 1],
            [1, 1, 0, 0, 0],
            [0, 1, 1, 0, 0]]

g2.hamiltonianCycle()
