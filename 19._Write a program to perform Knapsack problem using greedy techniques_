#include <stdio.h>

// Structure to represent items
struct Item {
    int weight;
    int value;
};

// Function to perform a greedy knapsack
void knapsack(int capacity, struct Item items[], int n) {
    // Sort items based on their value per unit weight (value/weight)
    float valuePerWeight[n];
    for (int i = 0; i < n; i++)
        valuePerWeight[i] = (float) items[i].value / items[i].weight;

    // Sort items based on value per unit weight using bubble sort
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (valuePerWeight[j] < valuePerWeight[j + 1]) {
                // Swap items based on value per unit weight
                float temp = valuePerWeight[j];
                valuePerWeight[j] = valuePerWeight[j + 1];
                valuePerWeight[j + 1] = temp;

                struct Item tempItem = items[j];
                items[j] = items[j + 1];
                items[j + 1] = tempItem;
            }
        }
    }

    int currentWeight = 0; // Current weight in knapsack
    float totalValue = 0; // Total value in knapsack

    // Fill the knapsack greedily
    for (int i = 0; i < n; i++) {
        // If adding the next item doesn't exceed capacity, add it completely
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            totalValue += items[i].value;
            printf("Added item with weight %d and value %d\n", items[i].weight, items[i].value);
        } else {
            // If adding the next item exceeds capacity, add fractional part
            int remainingWeight = capacity - currentWeight;
            totalValue += (float) remainingWeight * valuePerWeight[i];
            printf("Added fractional part of item with weight %d and value %d\n", items[i].weight, items[i].value);
            break;
        }
    }

    printf("Total value in knapsack: %.2f\n", totalValue);
}

int main() {
    // Example usage
    struct Item items[] = {{10, 60}, {20, 100}, {30, 120}};
    int capacity = 50;
    int n = sizeof(items) / sizeof(items[0]);

    printf("Items:\n");
    for (int i = 0; i < n; i++)
        printf("Item %d - Weight: %d, Value: %d\n", i+1, items[i].weight, items[i].value);

    printf("\nKnapsack Capacity: %d\n", capacity);
    printf("\nKnapsack Contents:\n");
    knapsack(capacity, items, n);

    return 0;
}
