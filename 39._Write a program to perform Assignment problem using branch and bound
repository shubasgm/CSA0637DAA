#include <stdio.h>
#include <stdbool.h>

#define N 5 // Define the size of the matrix

int minCost; // Global variable to store the minimum cost

// Function to find the minimum cost in the matrix
int findMinCost(int costMatrix[N][N], bool assignedRows[N], bool assignedCols[N], int row, int col, int totalCost) {
    if (row == N && col == N) {
        if (totalCost < minCost)
            minCost = totalCost;
        return 0;
    }

    // Skip if the row or column is already assigned
    if (assignedRows[row] || assignedCols[col])
        return findMinCost(costMatrix, assignedRows, assignedCols, row + (col + 1) / N, (col + 1) % N, totalCost);

    // Mark row and column as assigned
    assignedRows[row] = true;
    assignedCols[col] = true;

    // Calculate total cost
    totalCost += costMatrix[row][col];

    // Prune the branch if the current cost exceeds minimum cost found so far
    if (totalCost >= minCost) {
        assignedRows[row] = false;
        assignedCols[col] = false;
        return 0;
    }

    // Explore further
    findMinCost(costMatrix, assignedRows, assignedCols, row + (col + 1) / N, (col + 1) % N, totalCost);

    // Unmark row and column
    assignedRows[row] = false;
    assignedCols[col] = false;

    return 0;
}

// Main function
int main() {
    int costMatrix[N][N] = {{10, 2, 3, 4, 5},
                             {6, 5, 9, 8, 7},
                             {1, 3, 8, 7, 5},
                             {4, 6, 2, 9, 8},
                             {8, 2, 6, 4, 3}};

    bool assignedRows[N] = {false};
    bool assignedCols[N] = {false};
    minCost = 999999; // Initialize minCost to a large value

    // Start with the first cell
    findMinCost(costMatrix, assignedRows, assignedCols, 0, 0, 0);

    printf("Minimum Cost: %d\n", minCost);

    return 0;
}
